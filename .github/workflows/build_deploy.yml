name: Build and Deploy

on:
  workflow_call:
    inputs:
      version_bump:
        description: 'Version bump type (patch, minor, major)'
        required: true
        type: string

  pull_request:
    branches:
      - '**'  # Triggers on any branch

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Determine branch type
        id: branch_check
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          if [[ "$BRANCH_NAME" == *"cicd"* ]]; then
            echo "VERSION_BUMP=patch" >> $GITHUB_ENV
          elif [[ "$BRANCH_NAME" == *"minor"* ]]; then
            echo "VERSION_BUMP=minor" >> $GITHUB_ENV
          elif [[ "$BRANCH_NAME" == *"major"* ]]; then
            echo "VERSION_BUMP=major" >> $GITHUB_ENV
          else
            echo "Branch name must contain 'patch', 'minor', or 'major'."
            exit 1
          fi          

      - name: Install NPM
        run: npm install --force
        working-directory: ./bootstrap_carousel/streamlit_carousel/carousel/

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bump2version

      - name: Bump version in package.json
        run: |
          cd bootstrap_carousel
          
          git config --global user.email "thomasbs17@yahoo.fr"
          git config --global user.name "Thomas Bouamoud"
          
          bumpversion $VERSION_BUMP --verbose
          
          npm version $VERSION_BUMP --prefix ./streamlit_carousel/carousel/
          git add .
          git commit -m "chore: bump version to $VERSION_BUMP [skip ci]"
          
          git push origin cicd

      - name: Build with npm
        run: |
          npm run build --prefix ./bootstrap_carousel/streamlit_carousel/carousel/

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build distribution files
        run: |
          python -m build

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          python -m twine upload dist/*
